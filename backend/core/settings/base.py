"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.4.
"""
import os
from os.path import join, dirname

from common.constants.http import Http
from . import env, BASE_DIR
# Media files (user-uploaded)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from os.path import join, dirname
from oauth.tokens import signed_token_generator
# from oauthlib.oauth2.rfc6749.tokens import signed_token_generator
from . import env, BASE_DIR
from ..scopes import scopes, default_scopes


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
APP_NAME = (
    os.environ["APP_NAME"]
    if "APP_NAME" in os.environ
    else env.str("APP_NAME", default="Alpha")
)
SECRET_KEY = (
    os.environ["SECRET_KEY"] if "SECRET_KEY" in os.environ else env("SECRET_KEY")
)

OIDC_RSA_PRIVATE_KEY_FILE = (
    os.environ["OIDC_RSA_PRIVATE_KEY_FILE"]
    if "OIDC_RSA_PRIVATE_KEY_FILE" in os.environ
    else env("OIDC_RSA_PRIVATE_KEY_FILE")
)
OIDC_RSA_PRIVATE_KEY_FILE = (
    join(BASE_DIR, OIDC_RSA_PRIVATE_KEY_FILE)
    if not OIDC_RSA_PRIVATE_KEY_FILE.startswith("/")
    else OIDC_RSA_PRIVATE_KEY_FILE
)
with open(OIDC_RSA_PRIVATE_KEY_FILE) as f:
    OIDC_RSA_PRIVATE_KEY = f.read()
JWT_ISSUER = (
    os.environ["JWT_ISSUER"]
    if "JWT_ISSUER" in os.environ
    else env.str("JWT_ISSUER", "Alpha")
)

# Default user and applications
SUPER_ADMIN_EMAIL = (
    os.environ["SUPER_ADMIN_EMAIL"]
    if "SUPER_ADMIN_EMAIL" in os.environ
    else env.str("SUPER_ADMIN_EMAIL", default="service@pandosima.com")
)
SUPER_ADMIN_PASSWORD = (
    os.environ["SUPER_ADMIN_PASSWORD"]
    if "SUPER_ADMIN_PASSWORD" in os.environ
    else env.str("SUPER_ADMIN_PASSWORD", default="")
)
BUSINESS_CLIENT_ID = (
    os.environ["BUSINESS_CLIENT_ID"]
    if "BUSINESS_CLIENT_ID" in os.environ
    else env("BUSINESS_CLIENT_ID")
)
BUSINESS_CLIENT_SECRET = (
    os.environ["BUSINESS_CLIENT_SECRET"]
    if "BUSINESS_CLIENT_SECRET" in os.environ
    else env("BUSINESS_CLIENT_SECRET")
)
ECOMMERCE_CLIENT_ID = (
    os.environ["ECOMMERCE_CLIENT_ID"]
    if "ECOMMERCE_CLIENT_ID" in os.environ
    else env("ECOMMERCE_CLIENT_ID")
)
ECOMMERCE_CLIENT_SECRET = (
    os.environ["BUSINESS_CLIENT_SECRET"]
    if "BUSINESS_CLIENT_SECRET" in os.environ
    else env("BUSINESS_CLIENT_SECRET")
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=True)
# SECURITY WARNING: don't run with LOCAL_BUILD turned on in production!
LOCAL_BUILD = env.bool("LOCAL_BUILD", default=False)

# WARNING: These flags can be turn on for local pc only!
BUSINESS_FRONTEND_DEV_MODE = env.bool("BUSINESS_FRONTEND_DEV_MODE", default=False)
DOCS_FRONTEND_DEV_MODE = env.bool("DOCS_FRONTEND_DEV_MODE", default=False)

DEFAULT_HOST = (
    os.environ["DEFAULT_HOST"]
    if "DEFAULT_HOST" in os.environ
    else env.str("DEFAULT_HOST", default="localhost:8008")
)
BUSINESS_HOST = (
    os.environ["BUSINESS_HOST"]
    if "BUSINESS_HOST" in os.environ
    else env.str("BUSINESS_HOST", default="127.0.0.1:8008")
)
DOCS_HOST = (
    os.environ["DOCS_HOST"]
    if "DOCS_HOST" in os.environ
    else env.str("DOCS_HOST", default="127.0.0.1:8009")
)

CORS_ALLOW_ALL_ORIGINS = env.bool("CORS_ALLOW_ALL_ORIGINS", default=True)
CORS_ALLOWED_ORIGINS = env.list(
    "CORS_ALLOWED_ORIGINS",
    default=[
        f'http://{DEFAULT_HOST}',
        f'https://{DEFAULT_HOST}',
        f'http://{BUSINESS_HOST}',
        f'https://{BUSINESS_HOST}',
        f'http://{DOCS_HOST}',
        f'https://{DOCS_HOST}'
    ],
)
if BUSINESS_FRONTEND_DEV_MODE:
    CORS_ALLOWED_ORIGINS += [f'http://localhost:3008']

if DOCS_FRONTEND_DEV_MODE:
    CORS_ALLOWED_ORIGINS += [f'http://localhost:3009']

CORS_EXPOSE_HEADERS = [
    'filename',
    'ETag'
]

ALLOWED_HOSTS = env.list(
    'DJANGO_ALLOWED_HOSTS',
    default = [
        DEFAULT_HOST.split(':')[0],
        BUSINESS_HOST.split(':')[0],
        DOCS_HOST.split(':')[0],
        'host.docker.internal'
    ]
)


# Sending mails
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = env("EMAIL_PORT", default=587)
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = env.str(
    "DEFAULT_FROM_EMAIL", default="Alpha <noreply@pandosima.com>"
)
DEFAULT_SERVICE_EMAIL = env.str(
    "DEFAULT_SERVICE_EMAIL", default="Alpha <service@pandosima.com>"
)
OTP_EMAIL_SENDER = DEFAULT_FROM_EMAIL

#SMS
TWILIO_ACCOUNT_SID = (
    os.environ["TWILIO_ACCOUNT_SID"]
    if "TWILIO_ACCOUNT_SID" in os.environ
    else env.str("TWILIO_ACCOUNT_SID", default=None)
)
TWILIO_AUTH_TOKEN = (
    os.environ["TWILIO_AUTH_TOKEN"]
    if "TWILIO_AUTH_TOKEN" in os.environ
    else env.str("TWILIO_AUTH_TOKEN", default=None)
)
TWILIO_CALLER_ID = (
    os.environ["TWILIO_CALLER_ID"]
    if "TWILIO_CALLER_ID" in os.environ
    else env.str("TWILIO_CALLER_ID", default=None)
)
OTP_TOTP_SYNC = (
    os.environ["OTP_TOTP_SYNC"]
    if "OTP_TOTP_SYNC" in os.environ
    else env.str("OTP_TOTP_SYNC", default=0)
)

# OpenSearch
OPEN_SEARCH_HOST = (
    os.environ["OPEN_SEARCH_HOST"]
    if "OPEN_SEARCH_HOST" in os.environ
    else env.str("OPEN_SEARCH_HOST", default="localhost:9200")
)
OPEN_SEARCH_SECURE_SCHEME = (
    os.environ["OPEN_SEARCH_SECURE_SCHEME"]
    if "OPEN_SEARCH_SECURE_SCHEME" in os.environ
    else env.int("OPEN_SEARCH_SECURE_SCHEME", default=Http.HTTPS)
)
OPEN_SEARCH_SECURE_HOST = (
    os.environ["OPEN_SEARCH_SECURE_HOST"]
    if "OPEN_SEARCH_SECURE_HOST" in os.environ
    else env.str("OPEN_SEARCH_SECURE_HOST", default="192.168.1.224")
)
OPEN_SEARCH_SECURE_PORT = (
    os.environ["OPEN_SEARCH_SECURE_PORT"]
    if "OPEN_SEARCH_SECURE_PORT" in os.environ
    else env.int("OPEN_SEARCH_SECURE_PORT", default=9201)
)
OPEN_SEARCH_USER = (
    os.environ["OPEN_SEARCH_USER"]
    if "OPEN_SEARCH_USER" in os.environ
    else env.str("OPEN_SEARCH_USER", default="admin")
)
OPEN_SEARCH_PASSWORD = (
    os.environ["OPEN_SEARCH_PASSWORD"]
    if "OPEN_SEARCH_PASSWORD" in os.environ
    else env.str("OPEN_SEARCH_PASSWORD", default="M4P@s6w0r9d")
)
OPEN_SEARCH_TIMEOUT = (
    os.environ["OPEN_SEARCH_TIMEOUT"]
    if "OPEN_SEARCH_TIMEOUT" in os.environ
    else env.int("OPEN_SEARCH_TIMEOUT", default=120)
)
OPENSEARCH_DSL = {
    'default': {
        'hosts': 'localhost:9200',
        'http_auth': (OPEN_SEARCH_USER, OPEN_SEARCH_PASSWORD),
        'use_ssl': True,
        'verify_certs': False
    },
    'secure': {
        'hosts': [{
            "scheme": OPEN_SEARCH_SECURE_SCHEME,
            "host": OPEN_SEARCH_SECURE_HOST,
            "port": OPEN_SEARCH_SECURE_PORT
        }],
        'http_auth': (OPEN_SEARCH_USER, OPEN_SEARCH_PASSWORD),
        'timeout': OPEN_SEARCH_TIMEOUT,
    }
}

# NLP
RASA_ENDPOINT = (
    os.environ["RASA_ENDPOINT"]
    if "RASA_ENDPOINT" in os.environ
    else env.str("RASA_ENDPOINT", default="http://localhost:5008")
)


# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_vite', 
    'corsheaders',
    'django_filters',
    'oauth',
    'oauth2_provider',
    'rest_framework_api_key',
    'otp',
    'django_opensearch_dsl',
    'businesses',
    'hr',
	'knowledge',
    'websites',
    'va',
    'ecommerce',
    'contents',
    'firebase',
    'health_check'
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "oauth2_provider.middleware.OAuth2TokenMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware"
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            join(BASE_DIR, "templates"),
            join(BASE_DIR, "client-sites", "templates")
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# https://docs.djangoproject.com/en/5.0/ref/databases/#mysql-notes
DB_NAME = os.environ["DB_NAME"] if "DB_NAME" in os.environ else env("DB_NAME")
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": DB_NAME,
        "USER": os.environ["DB_USER"] if "DB_USER" in os.environ else env("DB_USER"),
        "PASSWORD": (
            os.environ["DB_PASSWORD"]
            if "DB_PASSWORD" in os.environ
            else env("DB_PASSWORD")
        ),
        "HOST": os.environ["DB_HOST"] if "DB_HOST" in os.environ else env("DB_HOST"),
        "PORT": os.environ["DB_PORT"] if "DB_PORT" in os.environ else env("DB_PORT"),
        "OPTIONS": {"charset": "utf8mb4"},
    }
}

AUTH_USER_MODEL = "oauth.User"
OAUTH2_PROVIDER_APPLICATION_MODEL = "oauth.Application"
OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = "oauth.AccessToken"
OAUTH2_PROVIDER_ID_TOKEN_MODEL = "oauth.IDToken"
OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = "oauth.RefreshToken"
OAUTH2_PROVIDER_GRANT_MODEL = "oauth.Grant"
AUTHENTICATION_BACKENDS = (
    "oauth.backends.CustomOAuth2Backend",
    "django.contrib.auth.backends.ModelBackend",  # To keep the Browsable API
)
OAUTH2_PROVIDER = {
    "OIDC_ENABLED": True,
    "OIDC_RSA_PRIVATE_KEY": OIDC_RSA_PRIVATE_KEY,
    "SCOPES": scopes,
    "DEFAULT_SCOPES": default_scopes,
    "SCOPES_BACKEND_CLASS": "oauth.settings_scopes.SettingsScopes",
    "OAUTH2_VALIDATOR_CLASS": "oauth.oauth_validators.CustomOAuth2Validator",
    "ACCESS_TOKEN_GENERATOR": signed_token_generator(
        OIDC_RSA_PRIVATE_KEY, issuer=JWT_ISSUER
    ),
    "REFRESH_TOKEN_GENERATOR": "oauthlib.oauth2.rfc6749.tokens.random_token_generator",
    "ACCESS_TOKEN_EXPIRE_SECONDS": 3600,
    "REFRESH_TOKEN_EXPIRE_SECONDS": 43200,
    "REFRESH_TOKEN_GRACE_PERIOD_SECONDS": 120,
    # ... any other settings you want
}

# Config Django Rest framework
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ["oauth.permissions.TokenHasActionScope"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
    ],
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
    ),
    "DEFAULT_PAGINATION_CLASS": "base.pagination.CustomPagination",
    "PAGE_SIZE": 12
}
LOGIN_URL = "/admin/login/"


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Content
#Limit content size by 100 MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600

# Front end resource.
BUSINESS_FRONTEND_STATIC_PATHS = [
    join(dirname(BASE_DIR), "business", ".nuxt", "dist", "client"),
    join(dirname(BASE_DIR), "business", ".nuxt", "dist", "server"),
]
DOCS_FRONTEND_STATIC_PATHS = [
    join(dirname(BASE_DIR), "docs", ".nuxt", "dist", "client"),
    join(dirname(BASE_DIR), "docs", ".nuxt", "dist", "server"),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
# Name of static files folder (after called python manage.py collectstatic)
STATIC_ROOT = join(BASE_DIR, "static")
STATIC_URL = "/static/"
STATICFILES_DIRS = [
    join(BASE_DIR, "client-sites", "static")
]
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"

MEDIA_ROOT = join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Vite config
BUSINESS_DIR = join(dirname(BASE_DIR), "business")
BUSINESS_ASSETS = join(BUSINESS_DIR, "assets")
BUSINESS_STATIC = join(BUSINESS_DIR, "output", "business")
if BUSINESS_FRONTEND_DEV_MODE:
    STATICFILES_DIRS += [BUSINESS_ASSETS]
BUSINESS_MANIFEST = (
    join(
        BUSINESS_DIR, ".nuxt", "dist", "server", "client.manifest.json"
    )
    if LOCAL_BUILD
    else join(BASE_DIR, "static", "business.manifest.json")
)
BUSINESS_URL_PREFIX = "business"
DOCS_DIR = join(dirname(BASE_DIR), "admin")
DOCS_ASSETS = join(DOCS_DIR, "assets")
DOCS_STATIC = join(DOCS_DIR, "output", "admin")
if DOCS_FRONTEND_DEV_MODE:
    STATICFILES_DIRS += [DOCS_ASSETS]
DOCS_MANIFEST = (
    join(
       DOCS_DIR, ".nuxt", "dist", "server", "client.manifest.json"
    )
    if LOCAL_BUILD
    else join(BASE_DIR, "static", "docs.manifest.json")
)
DOCS_URL_PREFIX = "docs"
DJANGO_VITE = {
    "default": {
        "dev_mode": BUSINESS_FRONTEND_DEV_MODE,
        "dev_server_host": "localhost",
        "dev_server_port": 3008,
        "manifest_path": BUSINESS_MANIFEST,
        "static_url_prefix": BUSINESS_URL_PREFIX,
        "ws_client_url": "@vite/client",
        "react_refresh_url": "@react-refresh",
    },
    "business": {
        "dev_mode": BUSINESS_FRONTEND_DEV_MODE,
        "dev_server_host": "localhost",
        "dev_server_port": 3008,
        "manifest_path": BUSINESS_MANIFEST,
        "static_url_prefix": BUSINESS_URL_PREFIX,
        "ws_client_url": "@vite/client",
        "react_refresh_url": "@react-refresh",
    },
    "docs": {
        "dev_mode": DOCS_FRONTEND_DEV_MODE,
        "dev_server_host": "localhost",
        "dev_server_port": 3009,
        "manifest_path": DOCS_MANIFEST,
        "static_url_prefix": DOCS_URL_PREFIX,
        "ws_client_url": "@vite/client",
        "react_refresh_url": "@react-refresh",
    }
}
if DEBUG:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "default": {
                "format": "[DJANGO] %(levelname)s %(asctime)s %(module)s "
                "%(name)s.%(funcName)s:%(lineno)s: %(message)s"
            },
        },
        "handlers": {
            "console": {
                "level": "DEBUG",
                "class": "logging.StreamHandler",
                "formatter": "default",
            },
        },
        "loggers": {
            "django_vite.core.asset_loader": {
                "handlers": ["console"],
                "level": "DEBUG",
                "propagate": False,
            },
            "*": {
                "handlers": ["console"],
                "level": "DEBUG",
                "propagate": True,
            },
        },
    }


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

FILE_UPLOAD_MAX_MEMORY_SIZE = (
    os.environ["FILE_UPLOAD_MAX_MEMORY_SIZE"]
    if "FILE_UPLOAD_MAX_MEMORY_SIZE" in os.environ
    else env.int("FILE_UPLOAD_MAX_MEMORY_SIZE", default=20971520)
)
FILE_UPLOAD_MAX_MEMORY_SIZE= int(FILE_UPLOAD_MAX_MEMORY_SIZE)
DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"
