# Generated by Django 5.2.7 on 2025-10-01 16:08

import django.utils.timezone
import otp.models.hotp
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailOTPDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The human-readable name of this device.', max_length=64)),
                ('confirmed', models.BooleanField(default=True, help_text='Is this device ready for use?')),
                ('token', models.CharField(blank=True, max_length=16, null=True)),
                ('valid_until', models.DateTimeField(default=django.utils.timezone.now, help_text='The timestamp of the moment of expiry of the saved token.')),
                ('last_generated_timestamp', models.DateTimeField(blank=True, help_text='The last time a token was generated for this device.', null=True)),
                ('throttling_failure_timestamp', models.DateTimeField(blank=True, default=None, help_text='A timestamp of the last failed verification attempt. Null if last attempt succeeded.', null=True)),
                ('throttling_failure_count', models.PositiveIntegerField(default=0, help_text='Number of successive failed attempts.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this device was initially created in the system.', null=True)),
                ('last_used_at', models.DateTimeField(blank=True, help_text='The most recent date and time this device was used.', null=True)),
                ('email', models.EmailField(blank=True, help_text='Optional alternative email address to send tokens to', max_length=254, unique=True)),
                ('users', models.ManyToManyField(blank=True, help_text='The users that this device belongs to.', null=True, related_name='%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HOTPDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The human-readable name of this device.', max_length=64)),
                ('confirmed', models.BooleanField(default=True, help_text='Is this device ready for use?')),
                ('throttling_failure_timestamp', models.DateTimeField(blank=True, default=None, help_text='A timestamp of the last failed verification attempt. Null if last attempt succeeded.', null=True)),
                ('throttling_failure_count', models.PositiveIntegerField(default=0, help_text='Number of successive failed attempts.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this device was initially created in the system.', null=True)),
                ('last_used_at', models.DateTimeField(blank=True, help_text='The most recent date and time this device was used.', null=True)),
                ('key', models.CharField(default=otp.models.hotp.default_key, help_text='A hex-encoded secret key of up to 40 bytes.', max_length=80, validators=[otp.models.hotp.key_validator])),
                ('digits', models.PositiveSmallIntegerField(choices=[(6, 6), (8, 8)], default=6, help_text='The number of digits to expect in a token.')),
                ('tolerance', models.PositiveSmallIntegerField(default=5, help_text='The number of missed tokens to tolerate.')),
                ('counter', models.BigIntegerField(default=0, help_text='The next counter value to expect.')),
                ('users', models.ManyToManyField(blank=True, help_text='The users that this device belongs to.', null=True, related_name='%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'HOTP device',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhoneOTPDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The human-readable name of this device.', max_length=64)),
                ('confirmed', models.BooleanField(default=True, help_text='Is this device ready for use?')),
                ('token', models.CharField(blank=True, max_length=16, null=True)),
                ('valid_until', models.DateTimeField(default=django.utils.timezone.now, help_text='The timestamp of the moment of expiry of the saved token.')),
                ('last_generated_timestamp', models.DateTimeField(blank=True, help_text='The last time a token was generated for this device.', null=True)),
                ('throttling_failure_timestamp', models.DateTimeField(blank=True, default=None, help_text='A timestamp of the last failed verification attempt. Null if last attempt succeeded.', null=True)),
                ('throttling_failure_count', models.PositiveIntegerField(default=0, help_text='Number of successive failed attempts.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this device was initially created in the system.', null=True)),
                ('last_used_at', models.DateTimeField(blank=True, help_text='The most recent date and time this device was used.', null=True)),
                ('phone', models.CharField(blank=True, help_text='Optional alternative phone number to send tokens to', max_length=15, unique=True)),
                ('users', models.ManyToManyField(blank=True, help_text='The users that this device belongs to.', null=True, related_name='%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
